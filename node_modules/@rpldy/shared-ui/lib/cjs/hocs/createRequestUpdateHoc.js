"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createRequestUpdateHoc = void 0;

var _react = _interopRequireWildcard(require("react"));

var _useUploadyContext = _interopRequireDefault(require("../hooks/useUploadyContext"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const createRequestUpdateHoc = _ref => {
  let {
    eventType,
    getIsValidEventData,
    getRequestData
  } = _ref;
  return Component => props => {
    const context = (0, _useUploadyContext.default)();
    const [updater, setUpdater] = (0, _react.useState)({
      updateRequest: null,
      requestData: null
    });
    const {
      id
    } = props; //need layout effect to register to event in time (block)

    (0, _react.useLayoutEffect)(() => {
      const handleEvent = function () {
        for (var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++) {
          params[_key] = arguments[_key];
        }

        return getIsValidEventData(id, ...params) === true ? //returning a promise to event dispatcher so it will await until its resolved by user-land code
        new Promise(resolve => {
          setUpdater({
            updateRequest: data => {
              //unregister handler so this instance doesnt continue listening unnecessarily
              context.off(eventType, handleEvent);
              resolve(data);
            },
            requestData: getRequestData(...params)
          });
        }) : //returning false for invalid data will cancel the request so must return undefined!
        undefined;
      };

      if (id) {
        context.on(eventType, handleEvent);
      }

      return () => {
        if (id) {
          context.off(eventType, handleEvent);
        }
      };
    }, [context, id]);
    return /*#__PURE__*/_react.default.createElement(Component, _extends({}, props, updater));
  };
};

exports.createRequestUpdateHoc = createRequestUpdateHoc;