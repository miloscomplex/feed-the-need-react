"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useRequestPreSend = exports.useItemStartListener = exports.useItemProgressListener = exports.useItemFinishListener = exports.useItemFinalizeListener = exports.useItemErrorListener = exports.useItemCancelListener = exports.useItemAbortListener = exports.useBatchStartListener = exports.useBatchProgressListener = exports.useBatchFinishListener = exports.useBatchFinalizeListener = exports.useBatchErrorListener = exports.useBatchCancelledListener = exports.useBatchAddListener = exports.useBatchAbortListener = exports.useAllAbortListener = void 0;

var _uploader = require("@rpldy/uploader");

var _hooksUtils = require("./hooksUtils");

const useBatchAddListener = (0, _hooksUtils.generateUploaderEventHook)(_uploader.UPLOADER_EVENTS.BATCH_ADD, false);
exports.useBatchAddListener = useBatchAddListener;
const useBatchStartListener = (0, _hooksUtils.generateUploaderEventHook)(_uploader.UPLOADER_EVENTS.BATCH_START);
exports.useBatchStartListener = useBatchStartListener;
const useBatchFinishListener = (0, _hooksUtils.generateUploaderEventHook)(_uploader.UPLOADER_EVENTS.BATCH_FINISH);
exports.useBatchFinishListener = useBatchFinishListener;
const useBatchCancelledListener = (0, _hooksUtils.generateUploaderEventHook)(_uploader.UPLOADER_EVENTS.BATCH_CANCEL);
exports.useBatchCancelledListener = useBatchCancelledListener;
const useBatchErrorListener = (0, _hooksUtils.generateUploaderEventHook)(_uploader.UPLOADER_EVENTS.BATCH_ERROR);
exports.useBatchErrorListener = useBatchErrorListener;
const useBatchFinalizeListener = (0, _hooksUtils.generateUploaderEventHook)(_uploader.UPLOADER_EVENTS.BATCH_FINALIZE);
exports.useBatchFinalizeListener = useBatchFinalizeListener;
const useBatchAbortListener = (0, _hooksUtils.generateUploaderEventHook)(_uploader.UPLOADER_EVENTS.BATCH_ABORT);
exports.useBatchAbortListener = useBatchAbortListener;
const useBatchProgressListener = (0, _hooksUtils.generateUploaderEventHookWithState)(_uploader.UPLOADER_EVENTS.BATCH_PROGRESS, batch => ({ ...batch
}));
exports.useBatchProgressListener = useBatchProgressListener;
const useItemStartListener = (0, _hooksUtils.generateUploaderEventHook)(_uploader.UPLOADER_EVENTS.ITEM_START);
exports.useItemStartListener = useItemStartListener;
const useItemFinishListener = (0, _hooksUtils.generateUploaderEventHook)(_uploader.UPLOADER_EVENTS.ITEM_FINISH);
exports.useItemFinishListener = useItemFinishListener;
const useItemCancelListener = (0, _hooksUtils.generateUploaderEventHook)(_uploader.UPLOADER_EVENTS.ITEM_CANCEL);
exports.useItemCancelListener = useItemCancelListener;
const useItemErrorListener = (0, _hooksUtils.generateUploaderEventHook)(_uploader.UPLOADER_EVENTS.ITEM_ERROR);
exports.useItemErrorListener = useItemErrorListener;
const useItemAbortListener = (0, _hooksUtils.generateUploaderEventHook)(_uploader.UPLOADER_EVENTS.ITEM_ABORT);
exports.useItemAbortListener = useItemAbortListener;
const useItemFinalizeListener = (0, _hooksUtils.generateUploaderEventHook)(_uploader.UPLOADER_EVENTS.ITEM_FINALIZE);
exports.useItemFinalizeListener = useItemFinalizeListener;
const useItemProgressListener = (0, _hooksUtils.generateUploaderEventHookWithState)(_uploader.UPLOADER_EVENTS.ITEM_PROGRESS, item => ({ ...item
}));
exports.useItemProgressListener = useItemProgressListener;
const useRequestPreSend = (0, _hooksUtils.generateUploaderEventHook)(_uploader.UPLOADER_EVENTS.REQUEST_PRE_SEND, false);
exports.useRequestPreSend = useRequestPreSend;
const useAllAbortListener = (0, _hooksUtils.generateUploaderEventHook)(_uploader.UPLOADER_EVENTS.ALL_ABORT, false);
exports.useAllAbortListener = useAllAbortListener;