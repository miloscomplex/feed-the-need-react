"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateUploaderEventHookWithState = exports.generateUploaderEventHook = void 0;

var _react = require("react");

var _shared = require("@rpldy/shared");

var _useUploadyContext = _interopRequireDefault(require("./useUploadyContext"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const useEventEffect = (event, fn) => {
  const context = (0, _useUploadyContext.default)();
  const {
    on,
    off
  } = context;
  (0, _react.useEffect)(() => {
    on(event, fn);
    return () => {
      off(event, fn);
    };
  }, [event, fn, on, off]);
};

const generateUploaderEventHookWithState = (event, stateCalculator) => (fn, id) => {
  const [eventState, setEventState] = (0, _react.useState)(null);

  if (fn && !(0, _shared.isFunction)(fn)) {
    id = fn;
    fn = undefined;
  }

  const eventCallback = (0, _react.useCallback)(function (eventObj) {
    if (!id || eventObj.id === id) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      setEventState(stateCalculator(eventObj, ...args));

      if ((0, _shared.isFunction)(fn)) {
        fn(eventObj, ...args);
      }
    }
  }, [fn, id]);
  useEventEffect(event, eventCallback);
  return eventState;
};

exports.generateUploaderEventHookWithState = generateUploaderEventHookWithState;

const generateUploaderEventHook = function (event) {
  let canScope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  return (fn, id) => {
    const eventCallback = (0, _react.useCallback)(function (eventObj) {
      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      return fn && (!canScope || !id || eventObj.id === id) ? fn(eventObj, ...args) : undefined;
    }, [fn, id]);
    useEventEffect(event, eventCallback);
  };
};

exports.generateUploaderEventHook = generateUploaderEventHook;